// 반복문 재귀문 둘다 메모리 속도 동일 2920KB, 44ms

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

// 반복
int binary_search_while(int s, int e, int k, const vector<int>& vt) {
    while (s <= e) {
        int mid = (s + e) / 2;
        if (vt[mid] == k) return 1; // 값을 찾았을 경우 1 반환
        else if (vt[mid] > k) e = mid - 1; // 왼쪽 절반 탐색
        else s = mid + 1; // 오른쪽 절반 탐색
    }
    return 0; // 값을 찾지 못한 경우 0 반환
}

// 재귀
int binary_search(int s, int e, int k, const vector<int>& vt) {
    if(s > e) {
        return 0;
    }
    
    int mid = (s + e) / 2;
    if(vt[mid] == k) return 1;
    else if(vt[mid] > k) return binary_search(s, mid - 1, k, vt);
    else return binary_search(mid + 1, e, k, vt);
}
           
int main(){
    
    ios::sync_with_stdio(false);
    cin.tie(0);

    
    int n;
    cin >> n;
    vector<int> vt_n;
    for(int i=0; i<n; i++){
        int j;
        cin >> j;
        vt_n.push_back(j);
    }
    sort(vt_n.begin(), vt_n.end());
    
    int m;
    cin >> m;
    for(int i=0; i<m; i++){
        int j;
        cin >>j;
        int ans = binary_search_while(0, n-1, j, vt_n);
        cout << ans << '\n';
    }
    
    return 0;
}