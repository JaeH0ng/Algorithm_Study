#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

long long binary_search(long long s, long long e, long long negative, vector<long long>& vt){
    // 주어진 음수값에 대해, 절댓값과 가장 가까운 숫자를 찾는 함수
    long long positive = -negative;
    if(s>e){
        if(s==vt.size()){
            
        }else{
        // s : 그 숫자의 인덱스
        if(positive - vt[s] <= vt[s+1]-positive){
            // s번째 값이 s+1번째 값보다 가까이 있으면 s출력
            // 그 외엔 s+1출력
            return vt[s];
        }else{
            return vt[s+1];
        }
        }
    }
    
    long long mid = (s+e)/2;
    if(vt[mid]>= positive) return binary_search(s, mid-1, negative, vt);
    else return binary_search(mid+1, e, negative, vt);
    
}


int main(){
    long long n;
    cin >> n;
    vector<long long> vt;
    for(long long i=0; i<n; i++){
        long long j;
        cin >> j;
        vt.push_back(j);
    }
    sort(vt.begin(), vt.end());
    
    // 다 양수거나 음수면 가장 0에 가까운 값들 2개 출력
    if(vt[0]>=0){
        cout << vt[0] << " " << vt[1] << endl;
        return 0;
    }else if(vt[n]<0){
        cout << vt [n-2] << " " << vt[n-1] << endl;
        return 0;
    }
    
    // 양수 하나 음수 하나인 경우
    // 원소 2개 골라서 그 합이 최소가 되도록
    // 음수 파트 숫자마다 반복문 돌려서, 합이 최소가 되는 양수 쌍을 구한뒤에
    // -> 배열에 다 더할필요 없고, 예를 들어 -10이면 10에 가까운 숫자를 찾으면 됨.
    // 그 중에서 가장 합이 작은 쌍을 출력?
    
    
    long long value=987654321;// 충분히 큰 양수
    long long ans_a, ans_b;
    // 음수인 요소들에 대해, 그 요소의 절댓값과 가장 가까운 정수를 벡터에 저장
    for(long long i=0; i<n; i++){
        if(vt[i]<0){
            long long k_p = binary_search(0, n-1, vt[i], vt);
            long long k = k_p + vt[i];
            if(value>k){
                value = k;
                ans_a = vt[i];
                ans_b = k_p;
            }
        }
    }
    cout << ans_a << " " << ans_b << endl;
    
    return 0;
}